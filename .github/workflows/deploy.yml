name: Sync Nockup toolchains

on:
  push:
    branches:
      - master
    paths:
      - 'scripts/**'
      - '.github/workflows/deploy.yml'
      - 'toolchains/**'
  workflow_dispatch:
  schedule:
    - cron: '0 06 * * *' # daily at 06:00 UTC

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      NOCKCHAIN_OWNER: sigilante
      NOCKCHAIN_REPO: nockchain
      MANIFEST_DIR: toolchains
      GIT_USER_NAME: github-actions[bot]
      GIT_USER_EMAIL: github-actions[bot]@users.noreply.github.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install b3sum for hash computation
        run: |
          cargo install b3sum
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Get latest nockchain commit and release info
        id: nockchain_info
        run: |
          # Get latest commit
          LATEST_COMMIT=$(git ls-remote https://github.com/${{ env.NOCKCHAIN_OWNER }}/${{ env.NOCKCHAIN_REPO }}.git HEAD | cut -f1)
          LATEST_SHORT=$(echo $LATEST_COMMIT | cut -c1-7)
          
          # Get latest release tag (if any)
          LATEST_TAG=$(git ls-remote --tags https://github.com/${{ env.NOCKCHAIN_OWNER }}/${{ env.NOCKCHAIN_REPO }}.git | tail -1 | cut -d/ -f3 || echo "")
          
          echo "commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "short=$LATEST_SHORT" >> $GITHUB_OUTPUT
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest nockchain commit: $LATEST_COMMIT"

      - name: Make generate script executable
        run: chmod +x ./scripts/generate-manifest.sh

      - name: Generate manifests for all binaries and platforms
        run: |
          # Export the commit hash for the script to use
          export NOCKCHAIN_COMMIT="${{ steps.nockchain_info.outputs.commit }}"
          export NOCKCHAIN_SHORT="${{ steps.nockchain_info.outputs.short }}"
          
          # Define binaries and platforms
          BINARIES=("hoon" "hoonc" "nockup")
          PLATFORMS=("linux64" "darwin64")
          CHANNEL="stable"
          
          # Track if any manifests were generated successfully
          SUCCESS=0
          
          # Generate manifest for each combination
          for binary in "${BINARIES[@]}"; do
            for platform in "${PLATFORMS[@]}"; do
              echo "Generating manifest for $binary on $platform with commit $NOCKCHAIN_COMMIT"
              if bash ./scripts/generate-manifest.sh "$binary" "$platform" "$CHANNEL"; then
                SUCCESS=$((SUCCESS + 1))
                echo "✓ Successfully generated manifest for $binary-$platform"
              else
                echo "⚠ Failed to generate manifest for $binary-$platform (release may not exist yet)"
              fi
            done
          done
          
          echo "Successfully generated $SUCCESS manifests"
          
          # If no manifests were generated, fail the workflow
          if [ $SUCCESS -eq 0 ]; then
            echo "Error: No manifests were generated successfully"
            exit 1
          fi

      - name: Commit and push changes if any
        run: |
          git config user.name "${GIT_USER_NAME}"
          git config user.email "${GIT_USER_EMAIL}"
          if [ -n "$(git status --porcelain)" ]; then
            git add "${MANIFEST_DIR}"
            COMMIT_MSG="chore(manifests): sync Nockup binaries from ${NOCKCHAIN_OWNER}/${NOCKCHAIN_REPO} @ ${{ steps.nockchain_info.outputs.short }}"
            git commit -m "$COMMIT_MSG"
            git push origin HEAD
            echo "✓ Pushed updated manifests"
          else
            echo "No changes to commit."
          fi

      # Upload artifacts with correct path pattern
      - name: Upload Linux manifests
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: manifests-x86_64-unknown-linux-gnu
          path: toolchains/*-x86_64-unknown-linux-gnu-*.toml
          retention-days: 7
          if-no-files-found: warn

      - name: Upload macOS manifests
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: manifests-x86_64-apple-darwin
          path: toolchains/*-x86_64-apple-darwin-*.toml
          retention-days: 7
          if-no-files-found: warn